pragma circom 2.0.0;

template MiMC5() {
    signal input x;
    signal input k;
    signal output h;

    var nRounds = 10;

    var c[nRounds] = [
        0,
        61541059480735830758646900880573817290638376072399641138528887424803745958125,
        71208468574593251922419736298570691295848930444259567740178997326896637870751,
        27802311718534568030266979387064819005844425381599397986684085751546263121180,
        42383408676553799237858156391177795257978402386012722895412077013409350833391,
        64593624452593759940914303327228599409762878255533614658884835851054659199202,
        16231843887986370175334145427425846499225182099773556066894180644567158287455,
        30590475706905529840542259107262851971621746753890968952631385272429550989957,
        52347439621407417356542089599927706853479034061986769298976044026518938740639,
        20548554382564482050056806168571448389274361430163267646067123870304987549056
    ];

    signal lastOutput[nRounds + 1];
    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutput[0] <== x;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutput[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutput[i + 1] <== base4[i] * base[i];
    }

    h <== lastOutput[nRounds] + k;
}

component main = MiMC5();